(module
 (type $0 (func))
 (func $pick (; 0 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (set_local $x
   (get_local $y)
  )
  (if
   (i32.const 1)
   (set_local $x
    (i32.const 1)
   )
  )
  (set_local $x
   (get_local $y)
  )
  (nop)
 )
 (func $pick-2 (; 1 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (set_local $y
   (get_local $x)
  )
  (if
   (i32.const 1)
   (set_local $y
    (i32.const 1)
   )
  )
  (set_local $y
   (get_local $x)
  )
  (nop)
 )
 (func $many (; 2 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (local $z i32)
  (local $w i32)
  (set_local $y
   (get_local $x)
  )
  (set_local $z
   (get_local $x)
  )
  (set_local $w
   (get_local $x)
  )
  (nop)
  (if
   (i32.const 1)
   (set_local $y
    (i32.const 1)
   )
  )
  (set_local $x
   (get_local $z)
  )
  (if
   (i32.const 1)
   (set_local $y
    (i32.const 1)
   )
  )
  (set_local $y
   (get_local $x)
  )
  (set_local $z
   (get_local $x)
  )
  (set_local $w
   (get_local $x)
  )
  (set_local $z
   (i32.const 2)
  )
  (set_local $x
   (get_local $z)
  )
  (if
   (i32.const 1)
   (set_local $y
    (i32.const 1)
   )
  )
  (set_local $y
   (get_local $x)
  )
  (set_local $z
   (get_local $x)
  )
  (set_local $w
   (get_local $x)
  )
  (set_local $z
   (i32.const 2)
  )
  (nop)
 )
 (func $copy-back (; 3 ;) (type $0)
  (local $0 i32)
  (local $1 i32)
  (loop $label$1
   (block $block
    (set_local $1
     (get_local $0)
    )
    (nop)
    (if
     (get_local $0)
     (unreachable)
    )
   )
   (br $label$1)
  )
 )
)
(module
 (type $0 (func))
 (type $1 (func (param i32) (result i32)))
 (type $2 (func (param i32 i32) (result i32)))
 (type $3 (func (param i32 i32 i32) (result i32)))
 (type $4 (func (param f64 f64 i32) (result f32)))
 (memory $0 100 100)
 (func $basics (; 0 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (drop
   (i32.add
    (i32.const 1)
    (i32.const 2)
   )
  )
  (drop
   (i32.add
    (i32.const 1)
    (i32.const 2)
   )
  )
  (if
   (i32.const 0)
   (nop)
  )
  (drop
   (i32.add
    (i32.const 1)
    (i32.const 2)
   )
  )
  (drop
   (i32.add
    (get_local $x)
    (get_local $y)
   )
  )
  (drop
   (i32.add
    (get_local $x)
    (get_local $y)
   )
  )
  (drop
   (i32.add
    (get_local $x)
    (get_local $y)
   )
  )
  (call $basics)
  (drop
   (i32.add
    (get_local $x)
    (get_local $y)
   )
  )
  (set_local $x
   (i32.const 100)
  )
  (drop
   (i32.add
    (get_local $x)
    (get_local $y)
   )
  )
 )
 (func $recursive1 (; 1 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (drop
   (i32.add
    (i32.const 1)
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
   )
  )
  (drop
   (i32.add
    (i32.const 1)
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
   )
  )
  (drop
   (i32.add
    (i32.const 2)
    (i32.const 3)
   )
  )
 )
 (func $recursive2 (; 2 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (drop
   (i32.add
    (i32.const 1)
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
   )
  )
  (drop
   (i32.add
    (i32.const 2)
    (i32.const 3)
   )
  )
  (drop
   (i32.add
    (i32.const 1)
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
   )
  )
 )
 (func $self (; 3 ;) (type $0)
  (local $x i32)
  (local $y i32)
  (drop
   (i32.add
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
    (i32.add
     (i32.const 2)
     (i32.const 3)
    )
   )
  )
  (drop
   (i32.add
    (i32.const 2)
    (i32.const 3)
   )
  )
 )
 (func $loads (; 4 ;) (type $0)
  (drop
   (i32.load
    (i32.const 10)
   )
  )
  (drop
   (i32.load
    (i32.const 10)
   )
  )
 )
 (func $8 (; 5 ;) (type $1) (param $var$0 i32) (result i32)
  (local $var$1 i32)
  (local $var$2 i32)
  (local $var$3 i32)
  (block $label$0 (result i32)
   (i32.store
    (tee_local $var$2
     (i32.add
      (get_local $var$1)
      (i32.const 4)
     )
    )
    (i32.and
     (i32.load
      (get_local $var$2)
     )
     (i32.xor
      (tee_local $var$2
       (i32.const 74)
      )
      (i32.const -1)
     )
    )
   )
   (i32.store
    (tee_local $var$1
     (i32.add
      (get_local $var$1)
      (i32.const 4)
     )
    )
    (i32.or
     (i32.load
      (get_local $var$1)
     )
     (i32.and
      (get_local $var$2)
      (i32.const 8)
     )
    )
   )
   (i32.const 0)
  )
 )
 (func $loop1 (; 6 ;) (type $2) (param $x i32) (param $y i32) (result i32)
  (set_local $x
   (get_local $y)
  )
  (nop)
  (nop)
  (nop)
  (return
   (get_local $y)
  )
 )
 (func $loop2 (; 7 ;) (type $3) (param $x i32) (param $y i32) (param $z i32) (result i32)
  (set_local $x
   (get_local $y)
  )
  (set_local $y
   (get_local $z)
  )
  (nop)
  (set_local $x
   (get_local $z)
  )
  (nop)
  (nop)
  (return
   (get_local $z)
  )
 )
 (func $loop3 (; 8 ;) (type $3) (param $x i32) (param $y i32) (param $z i32) (result i32)
  (set_local $x
   (get_local $y)
  )
  (set_local $y
   (get_local $z)
  )
  (nop)
  (nop)
  (nop)
  (return
   (get_local $z)
  )
 )
 (func $handle-removing (; 9 ;) (type $4) (param $var$0 f64) (param $var$1 f64) (param $var$2 i32) (result f32)
  (set_local $var$2
   (select
    (tee_local $var$2
     (i32.const 32767)
    )
    (tee_local $var$2
     (i32.const 1024)
    )
    (i32.const -2147483648)
   )
  )
  (f32.const 1)
 )
)
(module
 (type $0 (func))
 (type $1 (func (param i32 f64) (result i32)))
 (type $2 (func (param i64 f32 i32)))
 (global $global$0 (mut i32) (i32.const 10))
 (table 23 23 anyfunc)
 (export "func_1_invoker" (func $1))
 (export "func_6" (func $2))
 (func $0 (; 0 ;) (type $2) (param $var$0 i64) (param $var$1 f32) (param $var$2 i32)
  (if
   (block $label$1 (result i32)
    (drop
     (br_if $label$1
      (i32.const 0)
      (br_if $label$1
       (i32.const 128)
       (i32.const 0)
      )
     )
    )
    (i32.const -14051)
   )
   (set_global $global$0
    (i32.const 0)
   )
  )
 )
 (func $1 (; 1 ;) (type $0)
  (call $0
   (i64.const 1125899906842624)
   (f32.const -nan:0x7fc91a)
   (i32.const -46)
  )
 )
 (func $2 (; 2 ;) (type $1) (param $var$0 i32) (param $var$1 f64) (result i32)
  (if
   (get_global $global$0)
   (unreachable)
  )
  (i32.const 0)
 )
)
